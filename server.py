#!/usr/bin/env python3
"""
MCP –°–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap API
"""

import os
import logging
from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∞–∂–Ω–æ –¥–ª—è STDIO —Å–µ—Ä–≤–µ—Ä–æ–≤ - –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å print!)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–º–µ–Ω–µ–º "weather"
mcp = FastMCP("weather")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
OPENWEATHER_BASE_URL = "https://api.openweathermap.org/data/2.5"


async def make_weather_request(endpoint: str, params: dict[str, Any]) -> dict[str, Any] | None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenWeatherMap API
    
    Args:
        endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, "weather" –∏–ª–∏ "forecast")
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        JSON –æ—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not OPENWEATHER_API_KEY:
        logger.error("OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞
    params["appid"] = OPENWEATHER_API_KEY
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É (–¶–µ–ª—å—Å–∏–π, –º–µ—Ç—Ä—ã/—Å–µ–∫)
    params["lang"] = "ru"  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
    url = f"{OPENWEATHER_BASE_URL}/{endpoint}"
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
        async with httpx.AsyncClient() as client:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")
            response = await client.get(url, params=params, timeout=30.0)
            response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ HTTP
            return response.json()
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return None


@mcp.tool()
async def get_current_weather(city: str, units: str = "metric") -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ—Å–∫–≤–∞" –∏–ª–∏ "Moscow")
        units: –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - "metric" (–¶–µ–ª—å—Å–∏–π) –∏–ª–∏ "imperial" (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "q": city,
        "units": units
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    data = await make_weather_request("weather", params)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if not data:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    
    if "cod" in data and data["cod"] != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        main = data["main"]
        weather = data["weather"][0]
        wind = data["wind"]
        
        # –°–∏–º–≤–æ–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        temp_unit = "¬∞C" if units == "metric" else "¬∞F"
        wind_unit = "–º/—Å" if units == "metric" else "–º–∏–ª—å/—á"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = f"""
üåç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data['name']}, {data['sys']['country']}

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main['temp']:.1f}{temp_unit}
ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {main['feels_like']:.1f}{temp_unit}
üìä –ú–∏–Ω/–ú–∞–∫—Å: {main['temp_min']:.1f}{temp_unit} / {main['temp_max']:.1f}{temp_unit}

‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {weather['description'].capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%
üéöÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: {main['pressure']} –≥–ü–∞
üí® –í–µ—Ç–µ—Ä: {wind['speed']} {wind_unit}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind.get('deg', '–Ω/–¥')}¬∞
        """.strip()
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è {city}")
        return result
        
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {str(e)}"


@mcp.tool()
async def get_forecast(city: str, days: int = 3, units: str = "metric") -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (1-5)
        units: –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - "metric" (–¶–µ–ª—å—Å–∏–π) –∏–ª–∏ "imperial" (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city} –Ω–∞ {days} –¥–Ω–µ–π")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days = min(max(days, 1), 5)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "q": city,
        "units": units,
        "cnt": days * 8  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞, 8 –∑–∞–ø–∏—Å–µ–π = 1 –¥–µ–Ω—å
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    data = await make_weather_request("forecast", params)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if not data:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'."
    
    if "cod" not in data or data["cod"] != "200":
        return f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    try:
        # –°–∏–º–≤–æ–ª—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temp_unit = "¬∞C" if units == "metric" else "¬∞F"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        forecasts = []
        current_date = None
        day_data = []
        
        for item in data["list"]:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
            date = item["dt_txt"].split()[0]
            
            if current_date != date:
                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                if day_data:
                    forecasts.append(format_day_forecast(day_data, temp_unit))
                    if len(forecasts) >= days:
                        break
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
                current_date = date
                day_data = [item]
            else:
                day_data.append(item)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        if day_data and len(forecasts) < days:
            forecasts.append(format_day_forecast(day_data, temp_unit))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        result = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {data['city']['name']}, {data['city']['country']}\n\n"
        result += "\n\n".join(forecasts)
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"


def format_day_forecast(day_data: list, temp_unit: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
    
    Args:
        day_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∑–∞ –¥–µ–Ω—å (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)
        temp_unit: –°–∏–º–≤–æ–ª –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    """
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞—Ç—ã
    date = day_data[0]["dt_txt"].split()[0]
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    temps = [item["main"]["temp"] for item in day_data]
    avg_temp = sum(temps) / len(temps)
    min_temp = min(temps)
    max_temp = max(temps)
    
    # –°–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    descriptions = [item["weather"][0]["description"] for item in day_data]
    most_common_desc = max(set(descriptions), key=descriptions.count)
    
    # –°—Ä–µ–¥–Ω—è—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –∏ –≤–µ—Ç–µ—Ä
    avg_humidity = sum(item["main"]["humidity"] for item in day_data) / len(day_data)
    avg_wind = sum(item["wind"]["speed"] for item in day_data) / len(day_data)
    
    return f"""
üìÜ {date}
üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}{temp_unit}
üìä –ú–∏–Ω/–ú–∞–∫—Å: {min_temp:.1f}{temp_unit} / {max_temp:.1f}{temp_unit}
‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {most_common_desc.capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {avg_humidity:.0f}%
üí® –í–µ—Ç–µ—Ä: {avg_wind:.1f} –º/—Å
    """.strip()


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ STDIO (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥/–≤—ã–≤–æ–¥)
    mcp.run(transport="stdio")
