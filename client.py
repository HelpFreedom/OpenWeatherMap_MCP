#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenAI GPT-4o-mini
"""

import os
import asyncio
import json
from dotenv import load_dotenv
from openai import OpenAI
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    """
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ STDIO
    server_params = StdioServerParameters(
        command="python3",  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        args=["server.py"],  # –ê—Ä–≥—É–º–µ–Ω—Ç—ã (–ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É)
        env=None  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ)
    )
    
    print("üöÄ –ó–∞–ø—É—Å–∫ MCP –∫–ª–∏–µ–Ω—Ç–∞...")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            await session.initialize()
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
            tools_list = await session.list_tools()
            print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({len(tools_list.tools)}):")
            for tool in tools_list.tools:
                print(f"  ‚Ä¢ {tool.name}: {tool.description}")
            print()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
            openai_tools = convert_mcp_tools_to_openai(tools_list.tools)
            
            # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            messages = [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "
                        "—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ "
                        "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. "
                        "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    )
                }
            ]
            
            print("üí¨ –ß–∞—Ç –∑–∞–ø—É—â–µ–Ω! –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ –ø–æ–≥–æ–¥–µ (–≤–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
            print("=" * 60)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—â–µ–Ω–∏—è
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("\nüë§ –í—ã: ").strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥
                if user_input.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit", "q"]:
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if not user_input:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                messages.append({
                    "role": "user",
                    "content": user_input
                })
                
                # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                final_response = await process_conversation(
                    messages, 
                    openai_tools, 
                    session
                )
                
                # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                print(f"\nü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {final_response}")


async def process_conversation(messages: list, tools: list, session: ClientSession) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    Args:
        messages: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        tools: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
        session: –°–µ—Å—Å–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞
        
    Returns:
        –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    # –ú–∞–∫—Å–∏–º—É–º 5 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    max_iterations = 5
    
    for iteration in range(max_iterations):
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI GPT-4o-mini
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å gpt-4o-mini
            messages=messages,
            tools=tools,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            tool_choice="auto"  # –ú–æ–¥–µ–ª—å —Å–∞–º–∞ —Ä–µ—à–∞–µ—Ç, –Ω—É–∂–Ω—ã –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_message = response.choices[0].message
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages.append({
            "role": "assistant",
            "content": assistant_message.content,
            "tool_calls": assistant_message.tool_calls
        })
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        if not assistant_message.tool_calls:
            return assistant_message.content or "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n‚öôÔ∏è –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        for tool_call in assistant_message.tool_calls:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            function_name = tool_call.function.name
            function_args = json.loads(tool_call.function.arguments)
            
            print(f"  üîß {function_name}({', '.join(f'{k}={v}' for k, v in function_args.items())})")
            
            # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MCP
            try:
                result = await session.call_tool(function_name, function_args)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.content:
                    tool_result = result.content[0].text if result.content else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                else:
                    tool_result = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç"
                
            except Exception as e:
                tool_result = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {str(e)}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            messages.append({
                "role": "tool",
                "tool_call_id": tool_call.id,
                "content": tool_result
            })
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."


def convert_mcp_tools_to_openai(mcp_tools) -> list:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
    
    Args:
        mcp_tools: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
    """
    openai_tools = []
    
    for tool in mcp_tools:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è OpenAI
        openai_tool = {
            "type": "function",
            "function": {
                "name": tool.name,
                "description": tool.description or "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
                "parameters": tool.inputSchema  # JSON Schema –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            }
        }
        openai_tools.append(openai_tool)
    
    return openai_tools


# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
